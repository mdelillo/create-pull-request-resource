// Code generated by counterfeiter. DO NOT EDIT.
package githubfakes

import (
	"sync"

	"github.com/pivotal/create-pull-request-resource/out/github"
)

type FakeClient struct {
	ExecuteGithubApiStub        func(string, string, []byte) ([]byte, error)
	executeGithubApiMutex       sync.RWMutex
	executeGithubApiArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []byte
	}
	executeGithubApiReturns struct {
		result1 []byte
		result2 error
	}
	executeGithubApiReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ExecuteGithubCmdStub        func(...string) (string, error)
	executeGithubCmdMutex       sync.RWMutex
	executeGithubCmdArgsForCall []struct {
		arg1 []string
	}
	executeGithubCmdReturns struct {
		result1 string
		result2 error
	}
	executeGithubCmdReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) ExecuteGithubApi(arg1 string, arg2 string, arg3 []byte) ([]byte, error) {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.executeGithubApiMutex.Lock()
	ret, specificReturn := fake.executeGithubApiReturnsOnCall[len(fake.executeGithubApiArgsForCall)]
	fake.executeGithubApiArgsForCall = append(fake.executeGithubApiArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []byte
	}{arg1, arg2, arg3Copy})
	fake.recordInvocation("ExecuteGithubApi", []interface{}{arg1, arg2, arg3Copy})
	fake.executeGithubApiMutex.Unlock()
	if fake.ExecuteGithubApiStub != nil {
		return fake.ExecuteGithubApiStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.executeGithubApiReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ExecuteGithubApiCallCount() int {
	fake.executeGithubApiMutex.RLock()
	defer fake.executeGithubApiMutex.RUnlock()
	return len(fake.executeGithubApiArgsForCall)
}

func (fake *FakeClient) ExecuteGithubApiCalls(stub func(string, string, []byte) ([]byte, error)) {
	fake.executeGithubApiMutex.Lock()
	defer fake.executeGithubApiMutex.Unlock()
	fake.ExecuteGithubApiStub = stub
}

func (fake *FakeClient) ExecuteGithubApiArgsForCall(i int) (string, string, []byte) {
	fake.executeGithubApiMutex.RLock()
	defer fake.executeGithubApiMutex.RUnlock()
	argsForCall := fake.executeGithubApiArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) ExecuteGithubApiReturns(result1 []byte, result2 error) {
	fake.executeGithubApiMutex.Lock()
	defer fake.executeGithubApiMutex.Unlock()
	fake.ExecuteGithubApiStub = nil
	fake.executeGithubApiReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ExecuteGithubApiReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.executeGithubApiMutex.Lock()
	defer fake.executeGithubApiMutex.Unlock()
	fake.ExecuteGithubApiStub = nil
	if fake.executeGithubApiReturnsOnCall == nil {
		fake.executeGithubApiReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.executeGithubApiReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ExecuteGithubCmd(arg1 ...string) (string, error) {
	fake.executeGithubCmdMutex.Lock()
	ret, specificReturn := fake.executeGithubCmdReturnsOnCall[len(fake.executeGithubCmdArgsForCall)]
	fake.executeGithubCmdArgsForCall = append(fake.executeGithubCmdArgsForCall, struct {
		arg1 []string
	}{arg1})
	fake.recordInvocation("ExecuteGithubCmd", []interface{}{arg1})
	fake.executeGithubCmdMutex.Unlock()
	if fake.ExecuteGithubCmdStub != nil {
		return fake.ExecuteGithubCmdStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.executeGithubCmdReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ExecuteGithubCmdCallCount() int {
	fake.executeGithubCmdMutex.RLock()
	defer fake.executeGithubCmdMutex.RUnlock()
	return len(fake.executeGithubCmdArgsForCall)
}

func (fake *FakeClient) ExecuteGithubCmdCalls(stub func(...string) (string, error)) {
	fake.executeGithubCmdMutex.Lock()
	defer fake.executeGithubCmdMutex.Unlock()
	fake.ExecuteGithubCmdStub = stub
}

func (fake *FakeClient) ExecuteGithubCmdArgsForCall(i int) []string {
	fake.executeGithubCmdMutex.RLock()
	defer fake.executeGithubCmdMutex.RUnlock()
	argsForCall := fake.executeGithubCmdArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ExecuteGithubCmdReturns(result1 string, result2 error) {
	fake.executeGithubCmdMutex.Lock()
	defer fake.executeGithubCmdMutex.Unlock()
	fake.ExecuteGithubCmdStub = nil
	fake.executeGithubCmdReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ExecuteGithubCmdReturnsOnCall(i int, result1 string, result2 error) {
	fake.executeGithubCmdMutex.Lock()
	defer fake.executeGithubCmdMutex.Unlock()
	fake.ExecuteGithubCmdStub = nil
	if fake.executeGithubCmdReturnsOnCall == nil {
		fake.executeGithubCmdReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.executeGithubCmdReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeGithubApiMutex.RLock()
	defer fake.executeGithubApiMutex.RUnlock()
	fake.executeGithubCmdMutex.RLock()
	defer fake.executeGithubCmdMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ github.Client = new(FakeClient)
